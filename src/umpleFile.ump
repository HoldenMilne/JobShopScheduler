namespace V1_0.Java.JobShop;
class Machine {
    * -> * Job;
    Job activeJob;
    String name;
    autounique id;

    lazy boolean isRunning;
    status{
        Stopped {
            onStart -> Running;
            entry/{isRunning = false;}
        } // Has a job but needs to be started
        Running{
            onError -> Errored;
            completeRun -> Idle;
        } // the machine is processing a job
        Idle {
            startChangeOver -> InChangeOver;
        } // the machine is has completed a job a requires changeover
        InChangeOver {
            changeOverDone [hasNextJob()] -> Stopped;
            changeOverDone [!hasNextJob()] -> Finished;} // the machine is currently undergoing a changeover
        Finished {
            nextJobLoaded -> Stopped;
        } // the machine has finished a job, has finished a changeover and has no jobs left to run
        Errored{
            errorResolved -> Paused;
        } // an error has occurred.
        Paused {
            onResume -> Running;
        }
    }

    boolean hasNextJob(){
        return activeJob.getNextJob()!=null && activeJob.getNextJob()!=Job.DummyJob;
    }
}

class Job {
    const Job DummyJob = new Job("dummy", Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY,Integer.MIN_VALUE,null);
    String name;
    autounique id;
    float timeToCompletion;
    float changeOverTime;
    int priority;
    float total = {getChangeOverTime() + getTimeToCompletion()}
    Job nextJob;

}

class Operator {
    * -- * Machine;
    1 -- 1 Floor; // For all intents and purposes

    String name;
    int id;

    status {
        Idle {
            hasJobToService -> Inbound;
            noJobToService -> Idle;
            errorDetected -> Inbound;
            entry/checkMachineToService();
        }

        Inbound {
            atTargetMachine -> Servicing;
            entry/moveToMachine();
        }

        Servicing {
            complete -> Idle;
            exit/StartMachine();
            entry/StartServicing();
        }
    }
}

class Floor {
    depend V1_0.Java.Scheduling.*;
    1 -- * Machine;

    String name;
    int id;
}

class Shop {
    1 -- 1..* Floor;
}

namespace V1_0.Java.Scheduling;

class Schedule
{
    depend V1_0.Java.JobShop.Machine;
    1 -- 1..* Machine machines;
}

class OutputSchedule
{
    isA Schedule;
    depend V1_0.Java.JobShop.*;
    depend java.util.stream.*;
    public List<Machine> asMachineList()
    {
        return machines;
    }
    public List<Job> asJobList()
    {
        return machines.stream().map(machine -> machine.getActiveJob()).collect(Collectors.toList());
    }

}
class InputSchedule
{
    isA Schedule;

    depend java.io.File;
    public InputSchedule CreateFromCsv(File file){

    return null;
    }

    public InputSchedule CreateFromJson(File file){

    return null;
    }

    public InputSchedule CreateFromXml(File file){

    return null;
    }
}


class Scheduler
{
    depend V1_0.Java.JobShop.*;
    depend java.util.*;

    enum PivotSelection{
        LARGEST_TTC,LARGEST_TOT,SMALLEST_TTC,SMALLEST_TOT,NONE
    }

    PivotSelection firstPivotSelectionMode;
    PivotSelection secondPivotSelectionMode;

    before setFirstPivotSelectionMode
    {
        if(aFirstPivotSelectionMode==PivotSelection.NONE)
            aFirstPivotSelectionMode = PivotSelection.SMALLEST_TOT;
    }
    before setSecondPivotSelectionMode
    {
        if(aSecondPivotSelectionMode==PivotSelection.NONE)
            aSecondPivotSelectionMode = firstPivotSelectionMode;
    }

    //implement first alg here
    private OutputSchedule GreedyPriorityScheduler(List<Job> activeJobs)
    {
        List<Job> finalList = new ArrayList<Job>();
        return null; // return final list as output schedule
    }

    //implement second alg here
    private List<Job> SchedulerRecursion(List<Job> activeJobs)
    {
        return null;
    }

    public Machine NextMachineToService(InputSchedule s)
    {
        return NextMachinesToService(s,1).asMachineList().get(0);
    }

    public OutputSchedule GetFullServiceOrder(InputSchedule s)
    {
        return NextMachinesToService(s,s.getMachines().size());
    }

    public OutputSchedule NextMachinesToService(InputSchedule s,int nMachines)
    {
        List<Job> activeJobs = GetActiveJobList(s); // extract the active jobs from the machines
        return GreedyPriorityScheduler(activeJobs);
    }

    private List<Job> GetActiveJobList(InputSchedule s)
    {
        List<Job> activeJobs = new ArrayList<Job>();
        for(Machine m : s.getMachines())
        {
            activeJobs.add(m.getActiveJob());
        }
        return activeJobs;
    }
}