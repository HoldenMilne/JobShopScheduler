// Code generated by Umple 1.30.2.5248.dba0a5744

digraph "umpleFile" {
  size="80,10"
  rankdir="BT"
  node [shape=record margin=0; href="javascript:Action.selectClass(&quot;\N&quot;);"];

  // Class: Machine
  "Machine" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Machine    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="int id&#13;">  id : int  </td></tr></table>>,
   tooltip="class Machine
"];

  // Class: Job
  "Job" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Job    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="int id&#13;">  id : int  </td></tr><tr><td align="left" href="" title="float timeToCompletion&#13;">  timeToCompletion : float  </td></tr><tr><td align="left" href="" title="float changeOverTime&#13;">  changeOverTime : float  </td></tr><tr><td align="left" href="" title="int priority&#13;">  priority : int  </td></tr></table>>,
   tooltip="class Job
"];

  // Class: Operator
  "Operator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Operator    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="int id&#13;">  id : int  </td></tr></table>>,
   tooltip="class Operator
"];

  // Class: Floor
  "Floor" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Floor    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="int id&#13;">  id : int  </td></tr></table>>,
   tooltip="class Floor
"];

  // Class: Shop
  "Shop" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    Shop    </td></tr></table>>,
   tooltip="class Shop
"];

  // All associations
  "Machine" -> "Job" [dir="none", taillabel="1 ", headlabel="* ", tooltip="Machine 1  -- *  Job

A Job has A Machine. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Machine.

A Machine has some Jobs. It can have none, and there is no upper bound defined.

When a Job is created, its Machine must be assigned.
When a Job is deleted, its Machine is not deleted and its list of Jobs is decreased.
When a Machine is deleted, its Jobs are not deleted. They are assigned to another Machine.
" headtooltip="Machine 1  -- *  Job

A Job has A Machine. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Machine.

A Machine has some Jobs. It can have none, and there is no upper bound defined.

When a Job is created, its Machine must be assigned.
When a Job is deleted, its Machine is not deleted and its list of Jobs is decreased.
When a Machine is deleted, its Jobs are not deleted. They are assigned to another Machine.
" tailtooltip="Machine 1  -- *  Job

A Job has A Machine. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Machine.

A Machine has some Jobs. It can have none, and there is no upper bound defined.

When a Job is created, its Machine must be assigned.
When a Job is deleted, its Machine is not deleted and its list of Jobs is decreased.
When a Machine is deleted, its Jobs are not deleted. They are assigned to another Machine.
" tailurl="javascript:void()" headurl="javascript:void()" ];
  "Operator" -> "Machine" [dir="none", taillabel="* ", headlabel="* ", tooltip="Operator *  -- *  Machine

A Machine has some Operators. It can have none, and there is no upper bound defined.

An Operator has some Machines. It can have none, and there is no upper bound defined.

" headtooltip="Operator *  -- *  Machine

A Machine has some Operators. It can have none, and there is no upper bound defined.

An Operator has some Machines. It can have none, and there is no upper bound defined.

" tailtooltip="Operator *  -- *  Machine

A Machine has some Operators. It can have none, and there is no upper bound defined.

An Operator has some Machines. It can have none, and there is no upper bound defined.

" tailurl="javascript:void()" headurl="javascript:void()" ];
  "Operator" -> "Floor" [dir="none", taillabel="1 ", headlabel="1 ", tooltip="Operator 1  -- 1  Floor

A Floor has An Operator. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Operator.

An Operator has A Floor. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Floor.

There must always be an equal number of Floor and Operator, connected as Pairs.
When an Operator is created, its Floor must be created at the same time.
When an Operator is deleted, its Floor is deleted at the same time.
" headtooltip="Operator 1  -- 1  Floor

A Floor has An Operator. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Operator.

An Operator has A Floor. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Floor.

There must always be an equal number of Floor and Operator, connected as Pairs.
When an Operator is created, its Floor must be created at the same time.
When an Operator is deleted, its Floor is deleted at the same time.
" tailtooltip="Operator 1  -- 1  Floor

A Floor has An Operator. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Operator.

An Operator has A Floor. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Floor.

There must always be an equal number of Floor and Operator, connected as Pairs.
When an Operator is created, its Floor must be created at the same time.
When an Operator is deleted, its Floor is deleted at the same time.
" tailurl="javascript:void()" headurl="javascript:void()" ];
  "Floor" -> "Machine" [dir="none", taillabel="1 ", headlabel="* ", tooltip="Floor 1  -- *  Machine

A Machine has A Floor. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Floor.

A Floor has some Machines. It can have none, and there is no upper bound defined.

When a Machine is created, its Floor must be assigned.
When a Machine is deleted, its Floor is not deleted and its list of Machines is decreased.
When a Floor is deleted, its Machines are not deleted. They are assigned to another Floor.
" headtooltip="Floor 1  -- *  Machine

A Machine has A Floor. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Floor.

A Floor has some Machines. It can have none, and there is no upper bound defined.

When a Machine is created, its Floor must be assigned.
When a Machine is deleted, its Floor is not deleted and its list of Machines is decreased.
When a Floor is deleted, its Machines are not deleted. They are assigned to another Floor.
" tailtooltip="Floor 1  -- *  Machine

A Machine has A Floor. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Floor.

A Floor has some Machines. It can have none, and there is no upper bound defined.

When a Machine is created, its Floor must be assigned.
When a Machine is deleted, its Floor is not deleted and its list of Machines is decreased.
When a Floor is deleted, its Machines are not deleted. They are assigned to another Floor.
" tailurl="javascript:void()" headurl="javascript:void()" ];
  "Shop" -> "Floor" [dir="none", taillabel="1 ", headlabel="1..* ", tooltip="Shop 1  -- 1..*  Floor

A Floor has A Shop. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Shop.

A Shop has at least 1 Floor and can never have none. And there is no upper bound defined.

" headtooltip="Shop 1  -- 1..*  Floor

A Floor has A Shop. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Shop.

A Shop has at least 1 Floor and can never have none. And there is no upper bound defined.

" tailtooltip="Shop 1  -- 1..*  Floor

A Floor has A Shop. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Shop.

A Shop has at least 1 Floor and can never have none. And there is no upper bound defined.

" tailurl="javascript:void()" headurl="javascript:void()" ];
}
